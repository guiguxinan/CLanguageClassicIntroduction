#include <iostream>

using namespace std;

int main()
{
    /*面向对象的特征：抽象，封装，继承，多态*/
    cout<<"\n面向对象的特征："<<endl;
    cout<<"1.抽象：\n面向对象思想要求程序员将程序的每一部分都看作是一个抽象的对象,即程序是由一组抽象的对象组成的,更复杂点,这些对象根据他们相同的特征而进一步组成了一个类。\n例如,张明是一个人,我们把他看做一个对象,李四也是一个人,我们也把他看做一个对象,还有王五、赵钱、孙李等,他们都是具体的对象,但是我们可以发现,他们都具备几个共有的特征,那就是能够直立行走和会使用工具。\n所以可把他们归纳在一起,并抽象地看做一个类--人类。\n"<<endl;
    cout<<"2.封装：\n对于早期的软件,由于数据和程序混在一起,导致程序可读性很差,而且修改起来也很困难。\n许多数据都混在一起,而这些数据又被多个模块相互调用,因此在某个模块中改动某个数据时经常会对整个程序产生无法预料的影响。\n面向对象针对这个问题提出了数据封装,它将每个数据都封装在各自的类中,又设置了多种访问权限,别的类可以在被允许的情况下访问该类中的数女孩子,如果不被允许,则无法访问该数据,从而避免了非法操作和出错的可能性。\n"<<endl;
    cout<<"3.继承：\n正如前面所说,我们在研制一种新式发动机的时候,不想重新制作一辆汽车,因此继承这个概念就应运而生了,我们可以将该车定义为一个类,然后再声明一个类,将该车的所有对象都继承过来,其中自然包括发动机,然后再改造这个发动机,这样一辆新车就生产出来了。\n"<<endl;
    cout<<"4.多态：\n作为一名足球运行员,他在射门以后可能会产生多种结果。\n(1)球射在门框上。\n(2)球射到了观众席上。\n(3)球打中了守门员的头。\n(4)球被守门员接住了。\n(5)球进了。\n我们把这种不同的对象(不同的足球运动员)调用相同名称的函数(射门),却可导致不同的行为或者结果的现象称为多态性。\n这在编程中经常使用,例如,设计一个拳击游戏,那么你定义的多个角色在打出去一拳的时候,通常会有多种行为反馈:一拳打空,一拳打倒对方,一拳打在裁判的牙上等。\n"<<endl;
    return 0;
}
