#include <iostream>

using namespace std;
/*
    为什么将成员函数的声明和定义分开
    了解内联函数：
    当我们定义了一个函数后,编译器就会在内存中为其创建一个指令集,当我们调用这个函数时,程序就会跳转到该指令集处。
    当该函数运行完毕后,程序又会返回到原来执行调用该函数语句的下一行继续执行。
    假如对该函数执行了上百次调用,那么就要来回跳转上百次,这会严重影响到程序的执行效率。
    C++中,为解决这一问题,可使用关键字inline声明函数,如:
    inline int func();
    则编译器将不会创建真正的函数,而只是将这个内联函数的所有代码复制到调用函数中,这样程序在执行调用该函数时就不需要来回跳转,
    自然就提高了程序运行时的效率。
    使用内联函数在提高效率的同时,会需多用一些代码,比如记说程序调用了内联函数100次那么就要将该内联函数中的代码复制100次,
    这样会增大程序的体积。
    */ 
inline int func(int);  // 使用inline定义一个返回int类型的func函数

int main()
{
    int x;
    cout<<"请输入一个数字：\n";
    cin>>x;
    // func为内联函数，所以每次调用func函数会将func函数定义的内容在24行复制一份直接使用，不用每次调用该函数还跳转到29行执行func函数,从而提高效率
    cout<<"\n输入的数字为："<<func(x)<<endl;
    return 0;
}

int func(int x)
{
    return x;
}
