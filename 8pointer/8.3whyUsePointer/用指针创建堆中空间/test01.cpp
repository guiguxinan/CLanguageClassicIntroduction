#include <iostream>

using namespace std;

int main()
{
    /*用指针创建堆中空间：
        堆的好处是可以存储比较大的数据,而且只要存储的数据不是是程序员手动将其释放,那么就会永远保存在堆中。
        栈存储的数据只在函数内有效,超出函数就消失了。而全局变量保存的数据只有程序结束才会释放,而且很容易被修改。
        既然了解了堆的许多好处,接下来的问题就是如何使用它,我们知道堆是一大堆不连续的内存区域,在系统中由链表将它们串接起来,
        它不象栈,你可以为它其中的某个内存单元命名,为了保持数据的隐密性,堆中的每个内存单元都是匿名的,
        因此你必须先在堆中申请一个内存单元的地址,然后把它保存在一个指针中。这样,你只有使用该指针才可以访问到该内存单元的数据。
        打个比方,你要去博物馆,但是不知道地址,这时你就可以叫辆出出租车带你去博物馆,你不需要知道博物馆的地址,
        出租车司机的脑子中保存着博物馆的地址,你只需要告诉他你要去的博物馆,那么他马上就会拉着你去博物馆。
        在这个例子中,出租车司机脑子中记录的博物馆的地址相当于堆中某单元的内存地址,你不需要知道堆中该单元的地址,
        你只需要类似出租车司机一样的指针,那么你就可以访问堆中该单元的数据了。
        采取这种匿名的内存访问方式,而不是使用公开的全局变量,其优点是只有使用特定的指针才能访问特定的数据。
        这样就避免了会有任何试图修改它的非法操作。要做到这一点,我们首先得创建一个堆,然后定义一个指向该堆的指针。
        这样就只能通过该指针才能访问堆中数据。
        在C++中使用关键字new创建一个堆并分配内存,在new后后面跟一个要分配的对象类型
        编译器根据这个类型来分配内存。我们来看示例:*/ 
        int *p; // 整型指针变量p
        p = new int;    // 在堆中创建一个int类型的内存区域
        // 也可合并：int *p = new int;
        *p = 5;     //  将5赋值给存储区p
        cout<<*p<<endl; // 输出存储区中的数据5
    return 0;
    /* 
    注意：
    由于你的计算机的内存是有限的,因此可能会出现没有足够内存而无法满足new的请求
    的情况,在这种情况下,new会返回0,该值被赋给指针后,那么该指针就是一个空指针,空指针不会
    指向有效数据。new除了返回空值之外,还可能会引发异常,这将在后面的异常错误处理中进行讲解。
    */

}
