#include <iostream>

using namespace std;
/*通过引用来传递函数参数
    把指针作为函数的接收参数虽然能够正常使用,但是它却不易阅读,而且很难使用。
    比如在调用函数时我们要传递给函数的参数是变量的内存地址,如swap(&a.&b),传递给swap的是a和b的内存地址。
    而在函数交换中我们要使用星号(*)读取传专递进来的a的地址中的数据然后将它赋给局部变量c,
    接着再使用星号(*)读取传递进来的的地址中的数据赋给*a,最后将z赋给*a。
    这常常会令我们混淆,而且由于指针这种间接引用方式出错率高,因此我们通常使用别名这种直接引用方式来替换它。
*/
class ParamTrans{
    public:
    void swap(int &ra,int &rb){
        int c;
        cout<<"swap函数中,交换前,a:"<<ra<<",b:"<<rb<<endl;
        c = ra;
        ra = rb;
        rb = c;
        cout<<"swap函数中,交换后,a:"<<ra<<",b:"<<rb<<endl;
    }
};

int main()
{
    ParamTrans pt;
    int a = 4,b = 5;
    cout<<"主程序中,交换前,a："<<a<<",b:"<<b<<endl;
    pt.swap(a,b); // 将a，b的内存地址作为参数
    cout<<"主程序中,交换后,a："<<a<<",b:"<<b<<endl;
    return 0;
    /*注意:
指针是间接访问,比如它要用*(星号)来读取*后面地址处的数据,而引用则是直接访问
它是某个对象的别名,因此不用任何符号就可以直接读取该对象的数据。因此将指针作为函数的接收参
数是以间接引用方式来接收参数,而将别名作为函数的接收参数是以直接引用方式来接收参数
*/
}
